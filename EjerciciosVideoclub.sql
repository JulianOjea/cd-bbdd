-- DIFICULTAD: Muy fácil
-- 1.Devuelve todas las películas
SELECT * FROM PUBLIC.MOVIES;

-- 2. Devuelve todos los géneros existentes
SELECT * FROM GENRES;

-- 3. Devuelve la lista de todos los estudios de grabación que estén activos
SELECT * FROM PUBLIC.STUDIOS WHERE STUDIO_ACTIVE = 1;

-- 4. Devuelve una lista de los 20 últimos miembros en anotarse al videoclub
SELECT * FROM PUBLIC.MEMBERS ORDER BY MEMBER_DISCHARGE_DATE DESC LIMIT 20;


-- DIFICULTAD: Fácil

-- 5. Devuelve las 20 duraciones de películas más frecuentes, ordenados de mayor a menor.
-- mala interpretación, no se referia a las alquiladas más frecuentemente
SELECT M.MOVIE_DURATION  FROM PUBLIC.MEMBERS_MOVIE_RENTAL AS memb
INNER JOIN PUBLIC.MOVIES AS m ON MOVIE_ID = memb.MOVIE_ID 
GROUP BY m.MOVIE_ID  ORDER BY m.MOVIE_ID DESC LIMIT 20;

-- 6. Devuelve las películas del año 2000 en adelante que empiecen por la letra A.
-- para convertir a mayuscula UPPER(MOVIE_NAME)	
SELECT * FROM PUBLIC.MOVIES WHERE YEAR(MOVIE_LAUNCH_DATE) > 2000 AND MOVIE_NAME LIKE 'A%';

-- 7. Devuelve los actores nacidos un mes de Junio
SELECT * FROM PUBLIC.ACTORS WHERE MONTH(ACTOR_BIRTH_DATE) = 6 ;

-- 8. Devuelve los actores nacidos cualquier mes que no sea Junio y que sigan vivos.
SELECT * FROM PUBLIC.ACTORS WHERE MONTH(ACTOR_BIRTH_DATE) <> 6 AND ACTOR_DEAD_DATE IS NULL;

-- 9. Devuelve el nombre y la edad de todos los directores menores o iguales de 50 años que estén vivos
SELECT DIRECTOR_NAME, DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, TODAY())  AS Age 
	FROM directors 
	WHERE DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, TODAY()) <= 50 
	AND DIRECTOR_DEAD_DATE IS NULL;
	

-- 10. Devuelve el nombre y la edad de todos los actores menores de 50 años que hayan fallecido
SELECT
	ACTOR_NAME,
	DATEDIFF(YEAR, ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE)
FROM
	PUBLIC.ACTORS
WHERE
	DATEDIFF(YEAR, ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE) < 50
	AND ACTOR_DEAD_DATE IS NOT NULL;

-- 11. Devuelve el nombre de todos los directores menores o iguales de 40 años que estén vivos
SELECT
	DIRECTOR_NAME
FROM
	DIRECTORS
WHERE
	DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, TODAY()) < 40
	AND DIRECTOR_DEAD_DATE IS NULL;
	
-- 12. Indica la edad media de los directores vivos
SELECT
	AVG(DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, TODAY()))
FROM
	directors
WHERE
	DIRECTOR_DEAD_DATE IS NULL;
	
-- 13. Indica la edad media de los actores que han fallecido
SELECT
	AVG(DATEDIFF(YEAR, ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE)) AS "AVERAGE_AGE"
FROM
	PUBLIC.ACTORS
WHERE
	ACTOR_DEAD_DATE IS NOT NULL;


-- DIFICULTAD: Media

-- 14.Devuelve el nombre de todas las películas y el nombre del estudio que las ha realizado
SELECT
	M.MOVIE_NAME,
	S.STUDIO_NAME
FROM
	PUBLIC.MOVIES AS M
INNER JOIN PUBLIC.STUDIOS AS S
		ON
	M.STUDIO_ID = S.STUDIO_ID ;
		
-- 15.Devuelve los miembros que alquilaron al menos una película entre el año 2010 y el 2015
SELECT
	MEMB.MEMBER_NAME
FROM
	PUBLIC.MEMBERS_MOVIE_RENTAL RENT
INNER JOIN PUBLIC.MEMBERS MEMB
	ON
	RENT.MEMBER_ID = MEMB.MEMBER_ID
WHERE
	YEAR(MEMBER_RENTAL_DATE) > 2010
	AND YEAR(MEMBER_RENTAL_DATE) < 2015;
	
-- 16. Devuelve cuantas películas hay de cada país
SELECT
	n.NATIONALITY_NAME,
	count(*) AS "COUNT"
FROM
	PUBLIC.MOVIES AS m
INNER JOIN PUBLIC.NATIONALITIES AS n
	ON
	M.NATIONALITY_ID = n.NATIONALITY_ID
GROUP BY
	n.NATIONALITY_ID;
	
-- 17. Devuelve todas las películas que hay de género documental
SELECT
	*
FROM
	PUBLIC.MOVIES AS m
INNER JOIN PUBLIC.GENRES AS g
	ON
	g.GENRE_ID = m.GENRE_ID
WHERE
	g.GENRE_NAME = 'Documentary';

-- con subconsultas es más rapido
SELECT
	*
FROM
	MOVIES
WHERE
	GENRE_ID = (
	SELECT
		GENRE_ID
	FROM
		GENRES
	WHERE
		GENRE_NAME = 'Documentary');
	
-- 18. Devuelve todas las películas creadas por directores nacidos 
-- a partir de 1980 y que todavía están vivos
SELECT m.MOVIE_NAME FROM PUBLIC.MOVIES AS m
	INNER JOIN PUBLIC.DIRECTORS AS d
	ON m.DIRECTOR_ID = d.DIRECTOR_ID 
	WHERE YEAR(d.DIRECTOR_BIRTH_DATE) > 1980
	AND d.DIRECTOR_DEAD_DATE IS NULL
	
--con subconsulta
--se puede hacer con IN
SELECT
	*
FROM
	MOVIES
WHERE
	DIRECTOR_ID IN (
	SELECT
		DIRECTOR_ID FROM DIRECTORS
	WHERE
		YEAR(DIRECTOR_BIRTH_DATE) >= 1980
			AND DIRECTOR_DEAD_DATE IS NULL)
			
-- 19. Indica si hay alguna coincidencia de nacimiento de ciudad 
--(y si las hay, indicarlas) entre los miembros del videoclub y los directores.
SELECT m.MEMBER_NAME, d.DIRECTOR_NAME, d.DIRECTOR_BIRTH_PLACE, m.MEMBER_TOWN  
	FROM PUBLIC.MEMBERS m
	INNER JOIN PUBLIC.DIRECTORS d
	ON m.MEMBER_TOWN = d.DIRECTOR_BIRTH_PLACE;

-- 20. Devuelve el nombre y el año de todas las películas que han sido 
--producidas por un estudio que actualmente no esté activo
SELECT m.MOVIE_NAME, m.MOVIE_LAUNCH_DATE FROM PUBLIC.MOVIES m
	INNER JOIN PUBLIC.STUDIOS s
	ON m.STUDIO_ID = s.STUDIO_ID 
	WHERE s.STUDIO_ACTIVE = FALSE;

-- 21. Devuelve una lista de las últimas 10 películas que se han alquilado
SELECT m.MOVIE_NAME, rent.MEMBER_RENTAL_DATE  FROM PUBLIC.MOVIES m
	INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL rent
	ON m.MOVIE_ID = rent.MOVIE_ID 
	ORDER BY rent.MEMBER_RENTAL_DATE DESC LIMIT 10;
	
-- 22. Indica cuántas películas ha realizado cada director antes de cumplir 41 años
SELECT d.DIRECTOR_NAME, count(*) AS "Film number"
	FROM DIRECTORS d
	INNER JOIN PUBLIC.MOVIES m
	ON D.DIRECTOR_ID = M.DIRECTOR_ID 
	WHERE (YEAR(m.MOVIE_LAUNCH_DATE) - YEAR(d.DIRECTOR_BIRTH_DATE) < 41) 
	GROUP BY d.DIRECTOR_ID;
	
-- 23. Indica cuál es la media de duración de las películas de cada director
SELECT
	D.DIRECTOR_NAME, AVG(M.MOVIE_DURATION) AS AVERAGE_MOVIE_DURATION
FROM
	DIRECTORS D
INNER JOIN PUBLIC.MOVIES M
ON
	D.DIRECTOR_ID = M.DIRECTOR_ID
	GROUP BY D.DIRECTOR_ID ;
	
-- 24. Indica cuál es el nombre y la duración mínima de las películas 
-- que han sido alquiladas en los últimos 2 años por los miembros del videoclub 
-- (La "fecha de ejecución" en este script es el 25-01-2019)
SELECT
	M.MOVIE_NAME,
	M.MOVIE_DURATION
FROM
	PUBLIC.MOVIES AS M
INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL AS RENT
ON
	M.MOVIE_ID = RENT.MOVIE_ID
WHERE
	DATEDIFF(YEAR, RENT.MEMBER_RENTAL_DATE, '2019-01-25') <= 2
ORDER BY
	M.MOVIE_DURATION ASC
LIMIT 1;

-- para hacerlo con el date add 

SELECT
	M.MOVIE_NAME,
	M.MOVIE_DURATION
FROM
	PUBLIC.MOVIES AS M
INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL AS RENT
ON
	M.MOVIE_ID = RENT.MOVIE_ID
WHERE
	DATEADD(YEAR, -2 , DATE'2019-01-25') < RENT.MEMBER_RENTAL_DATE
ORDER BY
	M.MOVIE_DURATION ASC
LIMIT 1;

-- 25. Indica el número de películas que hayan hecho los directores durante 
--las décadas de los 60, 70 y 80 que contengan la palabra "The" en cualquier
-- parte del título
-- recordar utilizar el upper para que no haya problemas al comparar entre
-- may y minusc.

SELECT D.DIRECTOR_NAME, COUNT(*) FROM PUBLIC.DIRECTORS D
INNER JOIN PUBLIC.MOVIES M
ON D.DIRECTOR_ID = M.DIRECTOR_ID 
WHERE 
	YEAR(M.MOVIE_LAUNCH_DATE) >= 1960 AND
	YEAR(M.MOVIE_LAUNCH_DATE) < 1990 AND
	UPPER(M.MOVIE_NAME) LIKE '%THE%'
GROUP BY d.DIRECTOR_NAME;

--DIFICULTAD: Difícil

-- 26. Lista nombre, nacionalidad y director de todas las películas
SELECT
	M.MOVIE_NAME,
	N.NATIONALITY_NAME,
	D.DIRECTOR_NAME
FROM
	PUBLIC.MOVIES M
INNER JOIN PUBLIC.NATIONALITIES N
ON
	M.NATIONALITY_ID = N.NATIONALITY_ID
INNER JOIN PUBLIC.DIRECTORS D
ON
	D.DIRECTOR_ID = M.DIRECTOR_ID;

-- 27. Muestra las películas con los actores que han participado en cada una de ellas
SELECT
	M.MOVIE_NAME, A.ACTOR_NAME 
FROM
	PUBLIC.MOVIES M
INNER JOIN PUBLIC.MOVIES_ACTORS MA
ON
	M.MOVIE_ID = MA.MOVIE_ID
INNER JOIN PUBLIC.ACTORS A
ON A.ACTOR_ID = MA.ACTOR_ID;

-- 28. Indica cual es el nombre del director del que más películas se han alquilado
SELECT
	D.DIRECTOR_NAME,
	COUNT(*) AS TOTAL_RENTALS
FROM
	DIRECTORS D
INNER JOIN PUBLIC.MOVIES M
ON
	D.DIRECTOR_ID = M.DIRECTOR_ID
INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL RENT
ON
	M.MOVIE_ID = RENT.MOVIE_ID
GROUP BY
	D.DIRECTOR_NAME
ORDER BY
	TOTAL_RENTALS DESC
LIMIT 1;

-- 29. Indica cuantos premios han ganado cada uno de los estudios con las películas que 
-- han creado
SELECT
	S.STUDIO_NAME,
	SUM(AW.AWARD_WIN) AS TOTAL_AWARDS
FROM
	PUBLIC.STUDIOS S
INNER JOIN PUBLIC.MOVIES M
ON
	S.STUDIO_ID = M.STUDIO_ID
INNER JOIN PUBLIC.AWARDS AW
ON
	AW.MOVIE_ID = M.MOVIE_ID
GROUP BY
	STUDIO_NAME;

-- 30. Indica el número de premios a los que estuvo nominado un actor, pero que no ha 
-- conseguido (Si una película está nominada a un premio, su actor también lo está)
SELECT
    AC.ACTOR_NAME,
    SUM(A.AWARD_ALMOST_WIN) AS AWARD_NOMINATION
FROM
    PUBLIC.MOVIES M
INNER JOIN PUBLIC.AWARDS A ON
    A.MOVIE_ID = M.MOVIE_ID
INNER JOIN PUBLIC.MOVIES_ACTORS MA ON
    MA.MOVIE_ID = M.MOVIE_ID
INNER JOIN PUBLIC.ACTORS AC ON
    AC.ACTOR_ID = MA.ACTOR_ID
GROUP BY
    AC.ACTOR_NAME;

-- 31. Indica cuantos actores y directores hicieron películas para los estudios no activos
--** se pueden colocar una despues de otra simplemente
SELECT COUNT(DISTINCT m.DIRECTOR_ID) AS DIRECTOR_NUMBER  FROM STUDIOS S
INNER JOIN PUBLIC.MOVIES M
ON M.STUDIO_ID = S.STUDIO_ID 
WHERE S.STUDIO_ACTIVE = FALSE;


SELECT

    COUNT(DISTINCT M.DIRECTOR_ID) AS DIRECTOR_NUMBER,

    COUNT(DISTINCT MA.ACTOR_ID) AS ACTOR_NUMBER

FROM

    STUDIOS S

INNER JOIN MOVIES M ON

    M.STUDIO_ID = S.STUDIO_ID

INNER JOIN MOVIES_ACTORS MA ON

    MA.MOVIE_ID = M.MOVIE_ID

WHERE

    S.STUDIO_ACTIVE = FALSE
	
	
-- 32. Indica el nombre, ciudad, y teléfono de todos los miembros del videoclub que hayan 
-- alquilado películas que hayan sido nominadas a más de 150 premios y ganaran menos de 50
SELECT DISTINCT M.MEMBER_NAME, M.MEMBER_TOWN, M.MEMBER_PHONE FROM PUBLIC.MEMBERS M
INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL RENT
ON M.MEMBER_ID = RENT.MEMBER_ID 
INNER JOIN PUBLIC.AWARDS AW
ON AW.MOVIE_ID = RENT.MOVIE_ID
WHERE AW.AWARD_NOMINATION > 150 AND AW.AWARD_WIN < 50;


--se puede hacer con inner join y subconsulta para filtrar los datos

SELECT

    DISTINCT M.MEMBER_NAME,

    M.MEMBER_TOWN,

    M.MEMBER_PHONE

FROM

    MEMBERS_MOVIE_RENTAL MMR

INNER JOIN MEMBERS M ON

    MMR.MEMBER_ID = M.MEMBER_ID

WHERE

    MMR.MOVIE_ID IN(

    SELECT

        MOVIE_ID

    FROM

        AWARDS

    WHERE

        AWARD_NOMINATION > 150

        AND AWARD_WIN < 50)
		
-- 33. Comprueba si hay errores en la BD entre las películas y directores (un director 
-- fallecido en el 76 no puede dirigir una película en el 88)
SELECT D.DIRECTOR_NAME, MAX(M.MOVIE_LAUNCH_DATE) AS LAST_MOVIE, D.DIRECTOR_DEAD_DATE
FROM PUBLIC.MOVIES M
INNER JOIN PUBLIC.DIRECTORS D
ON D.DIRECTOR_ID = M.DIRECTOR_ID 
WHERE M.MOVIE_LAUNCH_DATE >= D.DIRECTOR_DEAD_DATE
GROUP BY D.DIRECTOR_NAME, D.DIRECTOR_DEAD_DATE  ;


-- 34. Utilizando la información de la sentencia anterior, modifica la fecha de defunción 
--a un año más tarde del estreno de la película (mediante sentencia SQL)
UPDATE PUBLIC.DIRECTORS D
SET D.DIRECTOR_DEAD_DATE = DATEADD(YEAR, 1, M.MOVIE_LAUNCH_DATE)
FROM PUBLIC.MOVIES M
WHERE D.DIRECTOR_ID = M.MOVIE_ID
AND M.MOVIE_LAUNCH_DATE >= D.DIRECTOR_DEAD_DATE;

-- 34. Utilizando los datos de la sentencia anterior, modifica la fecha de defunción a un año más tarde del estreno de la película (mediante sentencia SQL)

-- UPDATE TABLA SET COLUMNA = VALOR WHERE CONDICION 
UPDATE

    DIRECTORS

SET

    DIRECTOR_DEAD_DATE =(

    SELECT

        MAX(DATEADD(YEAR, 1, M.MOVIE_LAUNCH_DATE)) AS POST_MOVIE_LAUNCH_DATE

    FROM

        MOVIES M

    INNER JOIN DIRECTORS D ON

        M.DIRECTOR_ID = D.DIRECTOR_ID

    WHERE

        D.DIRECTOR_DEAD_DATE IS NOT NULL

        AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE

        AND D.DIRECTOR_ID = DIRECTORS.DIRECTOR_ID

    GROUP BY

        DIRECTOR_NAME,

        DIRECTOR_DEAD_DATE)

WHERE

    DIRECTOR_ID IN (

    SELECT

        DISTINCT D.DIRECTOR_ID

    FROM

        MOVIES M

    INNER JOIN DIRECTORS D ON

        M.DIRECTOR_ID = D.DIRECTOR_ID

    WHERE

        D.DIRECTOR_DEAD_DATE IS NOT NULL

        AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE )
		
--CON MERGE SE PUEDE HACER TAMBIEN
MERGE

INTO

    PUBLIC.DIRECTORS D

        USING (

    SELECT

        DIRECTOR_ID,

        DATEADD(YEAR,

        1,

        MAX(M.MOVIE_LAUNCH_DATE)) AS DIRECTOR_DEAD_DATE

    FROM

        PUBLIC.DIRECTORS D

    INNER JOIN PUBLIC.MOVIES M ON

        D.DIRECTOR_ID = M.DIRECTOR_ID

    WHERE

        D.DIRECTOR_DEAD_DATE IS NOT NULL

        AND M.MOVIE_LAUNCH_DATE > D.DIRECTOR_DEAD_DATE

    GROUP BY

        D.DIRECTOR_ID

        

        ) TOT(DIRECTOR_ID,

    DIRECTOR_DEAD_DATE) ON

    D.DIRECTOR_ID = TOT.DIRECTOR_ID

    WHEN MATCHED THEN

UPDATE

SET

    D.DIRECTOR_DEAD_DATE = TOT.DIRECTOR_DEAD_DATE



--DIFICULTAD: Berserk mode (enunciados simples, mucha diversión...)

--35. Indica cuál es el género favorito de cada uno de los directores cuando dirigen una
-- película
SELECT

    GROUPID.DIRECTOR_NAME,

    GROUP_CONCAT(GROUPID.GENRE_NAME) AS GENRE_NAME

FROM

    (

    SELECT

        COUNT(G.GENRE_NAME) AS NUM_MOVIES,

        D.DIRECTOR_ID,

        D.DIRECTOR_NAME,

        G.GENRE_ID,

        G.GENRE_NAME

    FROM

        MOVIES M

    INNER JOIN GENRES AS G ON

        M.GENRE_ID = G.GENRE_ID

    INNER JOIN DIRECTORS D ON

        M.DIRECTOR_ID = D.DIRECTOR_ID

    GROUP BY

        G.GENRE_ID,

        D.DIRECTOR_ID

    ORDER BY

        D.DIRECTOR_ID) GROUPID

INNER JOIN (

    SELECT

        DIRECTOR_ID,

        MAX(NUM_MOVIES) NUM_MOVIES

    FROM

        (

        SELECT

            COUNT(G.GENRE_NAME) AS NUM_MOVIES,

            D.DIRECTOR_ID,

            D.DIRECTOR_NAME,

            G.GENRE_ID,

            G.GENRE_NAME

        FROM

            MOVIES M

        INNER JOIN GENRES AS G ON

            M.GENRE_ID = G.GENRE_ID

        INNER JOIN DIRECTORS D ON

            M.DIRECTOR_ID = D.DIRECTOR_ID

        GROUP BY

            G.GENRE_ID,

            D.DIRECTOR_ID

        ORDER BY

            D.DIRECTOR_ID)

    GROUP BY

        DIRECTOR_ID) MAXVAL ON

    GROUPID.DIRECTOR_ID = MAXVAL.DIRECTOR_ID

    AND GROUPID.NUM_MOVIES = MAXVAL.NUM_MOVIES

GROUP BY

    GROUPID.DIRECTOR_NAME

/*SELECT
	GROUPID.DIRECTOR_NAME,
	GROUP_CONCAT(GENRE_NAME) AS GENRE_NAME
FROM
	(
	SELECT
		D.DIRECTOR_ID,
		G.GENRE_NAME,
		D.DIRECTOR_NAME ,
		COUNT(G.GENRE_NAME) AS NUM_MOVIES
	FROM
		MOVIES M
	INNER JOIN PUBLIC.GENRES G
ON
		M.GENRE_ID = G.GENRE_ID
	INNER JOIN DIRECTORS D 
ON
		D.DIRECTOR_ID = M.DIRECTOR_ID
	GROUP BY
		D.DIRECTOR_ID,
		G.GENRE_ID
) GROUPID
INNER JOIN 

(
	SELECT
		N_MOVIES.DIRECTOR_ID,
		MAX(N_MOVIES.NUM_MOVIES) AS NUM_MOVIES
	FROM
		(
		SELECT
			D.DIRECTOR_ID,
			G.GENRE_NAME,
			D.DIRECTOR_NAME ,
			COUNT(G.GENRE_NAME) NUM_MOVIES
		FROM
			MOVIES M
		INNER JOIN PUBLIC.GENRES G
ON
			M.GENRE_ID = G.GENRE_ID
		INNER JOIN DIRECTORS D 
ON
			D.DIRECTOR_ID = M.DIRECTOR_ID
		GROUP BY
			D.DIRECTOR_ID,
			G.GENRE_ID)
	GROUP BY
		DIRECTOR_ID) MAX_VALUE ON
	MAX_VALUE.DIRECTOR_ID = 
	GROUPID.DIRECTOR_ID
	AND N_MOVIES.MAX_MOVIES = GROUPID.MOVIES
GROUP BY
	DIRECTOR_NAME*/
	
--36. Indica cuál es la nacionalidad favorita de cada uno de los estudios en la producción 
--de las películas

SELECT 
	GROUPID.STUDIO_NAME, 
	GROUP_CONCAT(GROUPID.NUM_NAT) AS NUM_NAT
FROM
	(
	SELECT
		S.STUDIO_ID,
		S.STUDIO_NAME,
		N.NATIONALITY_NAME,
		COUNT(N.NATIONALITY_NAME) AS NUM_NAT
	FROM
		MOVIES M
	INNER JOIN PUBLIC.STUDIOS S ON
		M.STUDIO_ID = S.STUDIO_ID
	INNER JOIN PUBLIC.NATIONALITIES N ON
		N.NATIONALITY_ID = M.NATIONALITY_ID
	GROUP BY
		S.STUDIO_ID,
		N.NATIONALITY_ID) GROUPID
INNER JOIN (
	SELECT
		STUDIO_ID,
		MAX(NUM_NAT) NUM_NAT
	FROM
		(
		SELECT
			S.STUDIO_ID,
			S.STUDIO_NAME,
			N.NATIONALITY_NAME,
			COUNT(N.NATIONALITY_NAME) AS NUM_NAT
		FROM
			MOVIES M
		INNER JOIN PUBLIC.STUDIOS S
	ON
			M.STUDIO_ID = S.STUDIO_ID
		INNER JOIN PUBLIC.NATIONALITIES N
	ON
			N.NATIONALITY_ID = M.NATIONALITY_ID
		GROUP BY
			S.STUDIO_ID,
			N.NATIONALITY_ID)
	GROUP BY
		STUDIO_ID) MAXVAL ON
	GROUPID.STUDIO_ID = MAXVAL.STUDIO_ID
	AND GROUPID.NUM_NAT = MAXVAL.NUM_NAT
GROUP BY GROUPID.STUDIO_NAME

--37. Indica cuál fue la primera película que alquilaron los miembros del videoclub cuyos 
--teléfonos tengan como último dígito el ID de alguna nacionalidad
-- habra de hacerse con substring mejor y length

/*
SELECT MEMB.MEMBER_NAME, RENT.MEMBER_RENTAL_DATE, RENT.MOVIE_ID 
FROM PUBLIC.MEMBERS_MOVIE_RENTAL RENT
INNER JOIN PUBLIC.MEMBERS MEMB
ON RENT.MEMBER_ID = MEMB.MEMBER_ID 

SELECT MEMB.MEMBER_NAME, MEMB.MEMBER_PHONE, M.NATIONALITY_ID 
FROM PUBLIC.MOVIES M
INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL RENT
ON M.MOVIE_ID = RENT.MOVIE_ID 
INNER JOIN MEMBERS MEMB
ON MEMB.MEMBER_ID = RENT.MEMBER_ID;

, M.MOVIE_NAME 
INNER JOIN PUBLIC.MOVIES M
ON RENT.MOVIE_ID = M.MOVIE_ID 


SELECT MEMB.MEMBER_NAME, MEMB.MEMBER_ID, MIN(RENT.MEMBER_RENTAL_DATE)
FROM PUBLIC.MEMBERS_MOVIE_RENTAL RENT
INNER JOIN PUBLIC.MEMBERS MEMB
ON RENT.MEMBER_ID = MEMB.MEMBER_ID 
	WHERE MEMB.MEMBER_ID IN (
	SELECT M.MEMBER_ID
	FROM MEMBERS M
	WHERE CAST(RIGHT(M.MEMBER_PHONE, 1) AS INT) IN (
		SELECT N.NATIONALITY_ID  
		FROM PUBLIC.NATIONALITIES N
	))
GROUP BY MEMB.MEMBER_ID 
ORDER BY MEMB.MEMBER_ID DESC


SELECT M.MOVIE_NAME, MEMB.MEMBER_NAME FROM MOVIES M
INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL RENT
ON M.MOVIE_ID = RENT.MOVIE_ID 
INNER JOIN PUBLIC.MEMBERS MEMB
ON RENT.MEMBER_ID = MEMB.MEMBER_ID 
WHERE MEMB.MEMBER_NAME IN 
	(SELECT MEMB.MEMBER_NAME, MIN(RENT.MEMBER_RENTAL_DATE) AS FIRST_RENT
	FROM PUBLIC.MEMBERS_MOVIE_RENTAL RENT
	INNER JOIN PUBLIC.MEMBERS MEMB
	ON RENT.MEMBER_ID = MEMB.MEMBER_ID 
		WHERE MEMB.MEMBER_ID IN (
		SELECT M.MEMBER_ID
		FROM MEMBERS M
		WHERE CAST(RIGHT(M.MEMBER_PHONE, 1) AS INT) IN (
			SELECT N.NATIONALITY_ID  
			FROM PUBLIC.NATIONALITIES N
		))
	GROUP BY MEMB.MEMBER_ID
	ORDER BY MEMB.MEMBER_ID DESC)
	


SELECT DISTINCT M.MOVIE_NAME, MEMB.MEMBER_NAME FROM MOVIES M
INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL RENT
ON M.MOVIE_ID = RENT.MOVIE_ID 
INNER JOIN PUBLIC.MEMBERS MEMB
ON RENT.MEMBER_ID = MEMB.MEMBER_ID 
LEFT JOIN 
	(SELECT MEMB.MEMBER_NAME, MEMB.MEMBER_ID, MIN(RENT.MEMBER_RENTAL_DATE)
	FROM PUBLIC.MEMBERS_MOVIE_RENTAL RENT
	INNER JOIN PUBLIC.MEMBERS MEMB
	ON RENT.MEMBER_ID = MEMB.MEMBER_ID 
		WHERE MEMB.MEMBER_ID IN (
		SELECT M.MEMBER_ID
		FROM MEMBERS M
		WHERE CAST(RIGHT(M.MEMBER_PHONE, 1) AS INT) IN (
			SELECT N.NATIONALITY_ID  
			FROM PUBLIC.NATIONALITIES N
		))
	GROUP BY MEMB.MEMBER_ID 
	ORDER BY MEMB.MEMBER_ID DESC) INNER_TABLE
ON INNER_TABLE.MEMBER_NAME = MEMB.MEMBER_NAME;*/



--37. Indica cuál fue la primera película que alquilaron los miembros del 
--videoclub cuyos teléfonos tengan como último dígito el ID de alguna nacionalidad

SELECT
    MOVIERENTALS.MOVIE_NAME,
    MOVIERENTALS.MEMBER_NAME
FROM
    (
    SELECT
        MO.MOVIE_NAME,
        MMR.MOVIE_ID,
        MMR.MEMBER_ID,
        MMR.MEMBER_RENTAL_DATE,
        M.MEMBER_NAME,
        TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) AS "LAST_DIGIT"
    FROM
        MOVIES MO
    INNER JOIN
    MEMBERS_MOVIE_RENTAL MMR
    ON
        MO.MOVIE_ID = MMR.MOVIE_ID
    INNER JOIN MEMBERS M ON
        MMR.MEMBER_ID = M.MEMBER_ID
    WHERE
        TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) IN (
        SELECT
            NATIONALITY_ID
        FROM
            NATIONALITIES

 

)
    GROUP BY
        MO.MOVIE_NAME,
        MMR.MOVIE_ID,
        MMR.MEMBER_ID,
        MMR.MEMBER_RENTAL_DATE,
        M.MEMBER_NAME,
        LAST_DIGIT
    ORDER BY
        M.MEMBER_NAME

 

) MOVIERENTALS
INNER JOIN

    (
    SELECT
        MEMBER_ID,
        MIN(MEMBER_RENTAL_DATE) AS "FIRST_RENTAL"
    FROM
        (
        SELECT
            MO.MOVIE_NAME,
            MMR.MOVIE_ID,
            MMR.MEMBER_ID,
            MMR.MEMBER_RENTAL_DATE,
            M.MEMBER_NAME,
            TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) AS "LAST_DIGIT"
        FROM
            MOVIES MO
        INNER JOIN
    MEMBERS_MOVIE_RENTAL MMR
    ON
            MO.MOVIE_ID = MMR.MOVIE_ID
        INNER JOIN MEMBERS M ON
            MMR.MEMBER_ID = M.MEMBER_ID
        WHERE
            TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) IN (
            SELECT
                NATIONALITY_ID
            FROM
                NATIONALITIES

 

)
        GROUP BY
            MO.MOVIE_NAME,
            MMR.MOVIE_ID,
            MMR.MEMBER_ID,
            MMR.MEMBER_RENTAL_DATE,
            M.MEMBER_NAME,
            LAST_DIGIT
        ORDER BY
            M.MEMBER_NAME
    )
    GROUP BY
        MEMBER_ID) FIRSTRENTALS ON
    MOVIERENTALS.MEMBER_ID = FIRSTRENTALS.MEMBER_ID AND MOVIERENTALS.MEMBER_RENTAL_DATE = FIRSTRENTALS.FIRST_RENTAL
GROUP BY
    MOVIERENTALS.MOVIE_NAME,
    MOVIERENTALS.MEMBER_NAME
	
-- Fin de los ejercicios